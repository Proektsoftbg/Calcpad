using Calcpad.Document.Core.Segments;
using Calcpad.WebApi.Configs;
using Calcpad.WebApi.Models;
using Calcpad.WebApi.Models.Base;
using Calcpad.WebApi.Utils.Files;
using Calcpad.WebApi.Utils.Web.Service;
using MongoDB.Driver.Linq;

namespace Calcpad.WebApi.Services.Calcpad
{
    /// <summary>
    /// calcpad file helper service
    /// </summary>
    /// <param name="db"></param>
    public class CpdStorageService(MongoDBContext db, AppSettings<StorageConfig> storageConfig) : IScopedService
    {
        /// <summary>
        /// get a saved path relative to storage root
        /// </summary>
        /// <param name="bucketName"></param>
        /// <param name="fileName"></param>
        /// <returns></returns>
        public string GetObjectName(string bucketName, string fileName)
        {
            var savedPath = Path.Combine(
                storageConfig.Value.Root,
                bucketName,
                DateTime.UtcNow.ToString("yyyy/MM/dd"),
                fileName
            );
            var dir = Path.GetDirectoryName(savedPath);
            Directory.CreateDirectory(dir!);
            return Path.GetRelativePath(storageConfig.Value.Root, savedPath).Replace('\\', '/');
        }

        /// <summary>
        /// get calcpad file file path, storageroot/calcpad-files
        /// </summary>
        /// <param name="fileName"></param>
        /// <returns></returns>
        public string GetCpdObjectName(string fileName)
        {
            return GetObjectName("calcpad-files", fileName);
        }

        /// <summary>
        /// Get full path from relative path which generated by <see cref="GetCpdObjectName"/>
        /// </summary>
        /// <param name="objectName"></param>
        /// <returns></returns>
        public string GetCpdAbsoluteFullName(string objectName)
        {
            var path = $"%{storageConfig.Value.Environment}%/{objectName}";
            return Environment.ExpandEnvironmentVariables(path);
        }

        /// <summary>
        /// zip cpd file
        /// </summary>
        /// <param name="uniqueId"></param>
        /// <returns></returns>
        public async Task<(Stream?, string)> ZipAndDownloadCpdFile(string uniqueId)
        {
            var cpdModel = await db.AsQueryable<CalcpadFileModel>()
                .Where(x => x.UniqueId == uniqueId && !x.IsPublic)
                .FirstOrDefaultAsync();
            if (cpdModel == null)
                return (null, string.Empty);
            var fullPath = GetCpdAbsoluteFullName(cpdModel.ObjectName);
            if (!File.Exists(fullPath))
                return (null, string.Empty);

            // create zip
            // create template dir
            var rootDir = Path.Combine(storageConfig.Value.Root, "temp/cpdzip", cpdModel.UniqueId);
            Directory.CreateDirectory(rootDir);
            var includesDir = Path.Combine(rootDir, "includes");
            Directory.CreateDirectory(includesDir);

            // get all include files
            await CopyCpdFileToTemp(rootDir, cpdModel, true);

            var zipFilePath = Path.Combine(
                storageConfig.Value.Root,
                "temp/cpdzip",
                $"{cpdModel.UniqueId}_{Path.GetFileNameWithoutExtension(cpdModel.FileName)}.zip"
            );
            await ZipDirectory(rootDir, zipFilePath);

            return (new ReadAndDeleteStream(zipFilePath), Path.GetFileName(zipFilePath).Split("_").Last());
        }

        private async Task CopyCpdFileToTemp(string rootDir, CalcpadFileModel cpdModel, bool isMain)
        {
            var subDir = "includes";

            // copy main file to rootDir
            var fullPath = GetCpdAbsoluteFullName(cpdModel.ObjectName);
            var targetPath = Path.Combine(rootDir, isMain ? "./" : $"./{subDir}", isMain ? cpdModel.FileName : $"{cpdModel.UniqueId}_{cpdModel.FileName}");

            // modify include paths to includes folder
            var includeModels = await db.AsQueryable<CalcpadFileModel>()
                .Where(x => cpdModel.IncludeUniqueIds.Contains(x.UniqueId))
                .ToListAsync();

            // copy main file to rootDir by lines
            var reader = new StreamReader(fullPath);
            var writer = new StreamWriter(targetPath, false, reader.CurrentEncoding);
            while (!reader.EndOfStream)
            {
                var line = await reader.ReadLineAsync();
                var includeLine = IncludeLine.GetIncludeLine(0, line);
                if (includeLine != null)
                {
                    var includeModel = includeModels.FirstOrDefault(x =>
                        x.UniqueId == includeLine.Uid
                    );
                    if (includeModel != null)
                    {
                        var includePath = isMain
                            ? $"./{subDir}/{includeModel.UniqueId}_{includeModel.FileName}"
                            : $"./{includeModel.UniqueId}_{includeModel.FileName}";
                        includeLine.SetFilePath(includePath);
                        line = includeLine.ToString();
                    }
                }

                await writer.WriteLineAsync(line);
            }
            writer.Close();
            reader.Close();

            // save includes
            foreach (var includeModel in includeModels)
            {
                await CopyCpdFileToTemp(rootDir, includeModel, false);
            }
        }

        private static async Task ZipDirectory(string sourceDir, string zipFilePath)
        {
            if (File.Exists(zipFilePath))
                File.Delete(zipFilePath);
            await Task.Run(
                () => System.IO.Compression.ZipFile.CreateFromDirectory(sourceDir, zipFilePath)
            );
            // remove temp dir
            Directory.Delete(sourceDir, true);
        }
    }
}
