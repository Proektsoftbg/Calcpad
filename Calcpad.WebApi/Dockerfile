# 请参阅 https://aka.ms/customizecontainer 以了解如何自定义调试容器，以及 Visual Studio 如何使用此 Dockerfile 生成映像以更快地进行调试。

# 此阶段用于在快速模式(默认为调试配置)下从 VS 运行时
FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS base
USER $APP_UID
WORKDIR /app
# http
EXPOSE 8080
# https
EXPOSE 8081


# 此阶段用于生成服务项目
FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
ARG BUILD_CONFIGURATION=Release
WORKDIR /src
# 先复制 csproj 并还原任何依赖项(通过将它们缓存为图层来最大限度地减少重新构建的需要)
COPY ./Calcpad.Core/Calcpad.Core.csproj ./Calcpad.Core/
COPY ./Calcpad.OpenXml/Calcpad.OpenXml.csproj ./Calcpad.OpenXml/
COPY ./Calcpad.WebApi/Calcpad.WebApi/Calcpad.WebApi.csproj ./Calcpad.WebApi/Calcpad.WebApi/
COPY ./Calcpad.WebApi/Calcpad.Document/Calcpad.Document.csproj ./Calcpad.WebApi/Calcpad.Document/
RUN dotnet restore "./Calcpad.WebApi/Calcpad.WebApi/Calcpad.WebApi.csproj"
COPY ./Calcpad.Core ./Calcpad.Core
COPY ./Calcpad.OpenXml ./Calcpad.OpenXml
COPY ./Calcpad.WebApi ./Calcpad.WebApi
WORKDIR "/src/Calcpad.WebApi/Calcpad.WebApi"
RUN dotnet build "./Calcpad.WebApi.csproj" -c $BUILD_CONFIGURATION -o /app/build

# 此阶段用于发布要复制到最终阶段的服务项目
FROM build AS publish
ARG BUILD_CONFIGURATION=Release
RUN dotnet publish "./Calcpad.WebApi.csproj" -c $BUILD_CONFIGURATION -o /app/publish /p:UseAppHost=false

# 此阶段在生产中使用，或在常规模式下从 VS 运行时使用(在不使用调试配置时为默认值)
FROM base AS final
WORKDIR /app
COPY --from=publish /app/publish .
ENTRYPOINT ["dotnet", "Calcpad.WebApi.dll"]